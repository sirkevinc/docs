{"ast":null,"code":"import _slicedToArray from \"/Users/Kevin/Desktop/Projects/docs/docs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Kevin/Desktop/Projects/docs/docs/src/App.js\";\nimport React, { useState } from 'react';\nimport { Editor } from 'slate-react';\nimport { Value } from 'slate';\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [{\n      object: 'block',\n      type: 'paragraph',\n      nodes: [{\n        object: 'text',\n        leaves: [{\n          text: 'A line of text in a paragraph.'\n        }]\n      }]\n    }]\n  }\n}); // // Define our app...\n// class App extends React.Component {\n//   // Set the initial value when the app is first constructed.\n//   state = {\n//     value: initialValue,\n//   }\n//   // On change, update the app's React state with the new editor value.\n//   onChange = ({ value }) => {\n//     this.setState({ value })\n//   }\n//   // Render the editor.\n//   render() {\n//     return <Editor value={this.state.value} onChange={this.onChange} />\n//   }\n// }\n\nconst App = () => {\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n  return React.createElement(Editor, {\n    value: value,\n    onChange: opts => setValue(opts.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Kevin/Desktop/Projects/docs/docs/src/App.js"],"names":["React","useState","Editor","Value","initialValue","fromJSON","document","nodes","object","type","leaves","text","App","value","setValue","opts"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,OAAtB;AAEA,MAAMC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAe;AAClCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE,OADV;AAEEC,MAAAA,IAAI,EAAE,WAFR;AAGEF,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEE,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE;AADR,SADM;AAFV,OADK;AAHT,KADK;AADC;AADwB,CAAf,CAArB,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACUX,QAAQ,CAACG,YAAD,CADlB;AAAA;AAAA,QACTS,KADS;AAAA,QACFC,QADE;;AAGhB,SAAO,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAED,KAAf;AAAsB,IAAA,QAAQ,EAAEE,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACF,KAAN,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAJD;;AAMA,eAAeD,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Editor } from 'slate-react'\nimport { Value } from 'slate'\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            leaves: [\n              {\n                text: 'A line of text in a paragraph.',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n})\n\n// // Define our app...\n// class App extends React.Component {\n//   // Set the initial value when the app is first constructed.\n//   state = {\n//     value: initialValue,\n//   }\n\n//   // On change, update the app's React state with the new editor value.\n//   onChange = ({ value }) => {\n//     this.setState({ value })\n//   }\n\n//   // Render the editor.\n//   render() {\n//     return <Editor value={this.state.value} onChange={this.onChange} />\n//   }\n// }\n\nconst App = () => {\n  const [value, setValue] = useState(initialValue);\n\n  return <Editor value={value} onChange={opts => setValue(opts.value)} />\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}